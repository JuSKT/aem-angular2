{"version":3,"sources":["../../src/main/content/jcr_root/apps/ngaem/components/content/DynamicNgLoader.ts"],"names":[],"mappings":";;;;;;;;;;;YAEA;;;;;eAKG;YAEH;gBAMI,0BAAoB,WAA4B;oBAA5B,gBAAW,GAAX,WAAW,CAAiB;oBAC5C,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;oBACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAc,CAAC,CAAC;oBAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAM,CAAC,CAAC;oBACtC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,+BAAwB,CAAC,CAAC;oBAC5E,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBAC/C,CAAC;gBAED;;mBAEG;gBACH,6CAAkB,GAAlB,UAAsB,SAAiB,EAAE,GAAW,EAAE,MAA8B;oBAApF,iBAcC;oBAbG,IAAI,YAAY,CAAC;oBACjB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBACV,IAAI,CAAC;4BACD,IAAI,gBAAgB,GAAG,KAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;4BACxF,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,KAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;4BAC/D,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;4BACxC,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;wBAClD,CAAC;wBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACT,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;4BAChE,MAAM,CAAC,CAAC;wBACZ,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,YAAY,CAAC;gBACxB,CAAC;gBACL,uBAAC;YAAD,CAhCA,AAgCC,IAAA;;QAAA,CAAC","file":"DynamicNgLoader.js","sourcesContent":["import { Type, ApplicationRef, ComponentFactoryResolver, Component, ComponentRef, Injector, NgZone, NgModuleRef} from '@angular/core';\n\n/**\n * Class that will load Angular2 component dynamically at runtime outside of the root component.\n * This is needed because in AEM a component (Angular2 or regular AEM) can be dropped many time and that too\n * outside of root component's scope. If a component is outside of root component's scope Angular2 will\n * ignore it and will not render and that's why we need this DynamicNg2Loader.\n */\n\nexport class DynamicNg2Loader {\n    private appRef: ApplicationRef;\n    private componentFactoryResolver: ComponentFactoryResolver;\n    private zone:NgZone;\n    private injector:Injector;\n\n    constructor(private ngModuleRef:NgModuleRef<any>) {\n        this.injector = ngModuleRef.injector;\n        this.appRef = this.injector.get(ApplicationRef);\n        this.zone = this.injector.get(NgZone);\n        this.componentFactoryResolver = this.injector.get(ComponentFactoryResolver);\n        console.log(this.componentFactoryResolver);\n    }\n\n    /**\n     * Render component in DOM\n     */\n    loadComponentAtDom<T>(component:Type<T>, dom:Element, onInit?: (Component:T) => void): ComponentRef<T> {\n        let componentRef;\n        this.zone.run(() => {\n            try {\n                let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n                componentRef = componentFactory.create(this.injector, [], dom);\n                onInit && onInit(componentRef.instance);\n                this.appRef.attachView(componentRef.hostView);\n            } catch (e) {\n                console.error(\"Unable to load component\", component, \"at\", dom);\n                throw e;\n            }\n        });\n        return componentRef;\n    }\n}"],"sourceRoot":"/src/main/content/jcr_root/apps/ngaem"}